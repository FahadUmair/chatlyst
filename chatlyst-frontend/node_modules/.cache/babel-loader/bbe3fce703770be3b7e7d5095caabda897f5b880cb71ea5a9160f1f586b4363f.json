{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback, useEffect } from \"react\";\nimport { checkHealth, sendMessage } from \"../api/chatApi\";\nfunction useChat() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [serverHealth, setServerHealth] = useState(null);\n\n  // Server health hook\n  const fetchServerHealthStatus = useCallback(async () => {\n    try {\n      const healthStatus = await checkHealth();\n      console.log(\"Server health:\", healthStatus);\n      setServerHealth(healthStatus);\n      setError(null);\n    } catch (error) {\n      console.error(\"Health check failed:\", error);\n      setServerHealth(null);\n      setError(\"Server health check failed. Please try again later.\");\n    }\n  }, []);\n\n  // Send message hook\n  const handleUserMessage = useCallback(async userMessage => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      // Add user message to the chat\n      const userMessageObj = {\n        text: userMessage,\n        isUser: true\n      };\n      setMessages(prevMessages => [...prevMessages, userMessageObj]);\n\n      // Send message to the server\n      const response = await sendMessage(userMessage);\n      console.log(\"Server response:\", response);\n\n      // Add server response to the chat\n      const serverMessageObj = {\n        text: response.message,\n        isUser: false\n      };\n      setMessages(prevMessages => [...prevMessages, serverMessageObj]);\n    } catch (error) {\n      console.error(\"Message request failed:\", error);\n      setError(\"Failed to send message. Please try again.\");\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  // Check server health on component mount\n  useEffect(() => {\n    fetchServerHealthStatus();\n  }, [fetchServerHealthStatus]);\n  return {\n    messages,\n    isLoading,\n    error,\n    serverHealth,\n    handleUserMessage,\n    fetchServerHealthStatus\n  };\n}\n_s(useChat, \"9BtnbrEMwFylwIF5qIRImf+BEQc=\");\n;\nexport default useChat;","map":{"version":3,"names":["useState","useCallback","useEffect","checkHealth","sendMessage","useChat","_s","messages","setMessages","isLoading","setIsLoading","error","setError","serverHealth","setServerHealth","fetchServerHealthStatus","healthStatus","console","log","handleUserMessage","userMessage","userMessageObj","text","isUser","prevMessages","response","serverMessageObj","message"],"sources":["/Users/fahadumair/Desktop/collectivei/chatlyst-frontend/src/hooks/useChat.js"],"sourcesContent":["import { useState, useCallback, useEffect } from \"react\";\nimport { checkHealth, sendMessage } from \"../api/chatApi\";\n\nfunction useChat() {\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [serverHealth, setServerHealth] = useState(null);\n\n  // Server health hook\n  const fetchServerHealthStatus = useCallback(async () => {\n    try {\n      const healthStatus = await checkHealth();\n      console.log(\"Server health:\", healthStatus);\n      setServerHealth(healthStatus);\n      setError(null);\n    } catch (error) {\n      console.error(\"Health check failed:\", error);\n      setServerHealth(null);\n      setError(\"Server health check failed. Please try again later.\");\n    }\n  }, []);\n\n  // Send message hook\n  const handleUserMessage = useCallback(async (userMessage) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      // Add user message to the chat\n      const userMessageObj = { text: userMessage, isUser: true };\n      setMessages((prevMessages) => [...prevMessages, userMessageObj]);\n\n      // Send message to the server\n      const response = await sendMessage(userMessage);\n      console.log(\"Server response:\", response);\n\n      // Add server response to the chat\n      const serverMessageObj = { text: response.message, isUser: false };\n      setMessages((prevMessages) => [...prevMessages, serverMessageObj]);\n    } catch (error) {\n      console.error(\"Message request failed:\", error);\n      setError(\"Failed to send message. Please try again.\");\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  // Check server health on component mount\n  useEffect(() => {\n    fetchServerHealthStatus();\n  }, [fetchServerHealthStatus]);\n\n  return {\n    messages,\n    isLoading,\n    error,\n    serverHealth,\n    handleUserMessage,\n    fetchServerHealthStatus,\n  };\n};\n\nexport default useChat;\n\n\n\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,EAAEC,SAAS,QAAQ,OAAO;AACxD,SAASC,WAAW,EAAEC,WAAW,QAAQ,gBAAgB;AAEzD,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACa,YAAY,EAAEC,eAAe,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;;EAEtD;EACA,MAAMe,uBAAuB,GAAGd,WAAW,CAAC,YAAY;IACtD,IAAI;MACF,MAAMe,YAAY,GAAG,MAAMb,WAAW,CAAC,CAAC;MACxCc,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,YAAY,CAAC;MAC3CF,eAAe,CAACE,YAAY,CAAC;MAC7BJ,QAAQ,CAAC,IAAI,CAAC;IAChB,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdM,OAAO,CAACN,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5CG,eAAe,CAAC,IAAI,CAAC;MACrBF,QAAQ,CAAC,qDAAqD,CAAC;IACjE;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMO,iBAAiB,GAAGlB,WAAW,CAAC,MAAOmB,WAAW,IAAK;IAC3DV,YAAY,CAAC,IAAI,CAAC;IAClBE,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF;MACA,MAAMS,cAAc,GAAG;QAAEC,IAAI,EAAEF,WAAW;QAAEG,MAAM,EAAE;MAAK,CAAC;MAC1Df,WAAW,CAAEgB,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEH,cAAc,CAAC,CAAC;;MAEhE;MACA,MAAMI,QAAQ,GAAG,MAAMrB,WAAW,CAACgB,WAAW,CAAC;MAC/CH,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEO,QAAQ,CAAC;;MAEzC;MACA,MAAMC,gBAAgB,GAAG;QAAEJ,IAAI,EAAEG,QAAQ,CAACE,OAAO;QAAEJ,MAAM,EAAE;MAAM,CAAC;MAClEf,WAAW,CAAEgB,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEE,gBAAgB,CAAC,CAAC;IACpE,CAAC,CAAC,OAAOf,KAAK,EAAE;MACdM,OAAO,CAACN,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/CC,QAAQ,CAAC,2CAA2C,CAAC;IACvD,CAAC,SAAS;MACRF,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAR,SAAS,CAAC,MAAM;IACda,uBAAuB,CAAC,CAAC;EAC3B,CAAC,EAAE,CAACA,uBAAuB,CAAC,CAAC;EAE7B,OAAO;IACLR,QAAQ;IACRE,SAAS;IACTE,KAAK;IACLE,YAAY;IACZM,iBAAiB;IACjBJ;EACF,CAAC;AACH;AAACT,EAAA,CA1DQD,OAAO;AA0Df;AAED,eAAeA,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}